import{P as f,C as n,E as _,B as u,D as y,a as i}from"./index-Cu7QyKko.js";import{G as D,C as g}from"./cd-logger.controller-DxPs_as6.js";import"./index-DKnwA07G.js";import"./index-CCs3NjLB.js";import"./dayjs.min-C47XFJE1.js";import"./index-JiKw9JSs.js";var v=Object.defineProperty,h=Object.getOwnPropertyDescriptor,c=(l,e,r,a)=>{for(var t=a>1?void 0:a?h(e,r):e,s=l.length-1,d;s>=0;s--)(d=l[s])&&(t=(a?d(e,r,t):d(t))||t);return a&&t&&v(e,r,t),t};let o=class{};c([f({name:"doc_type_id"})],o.prototype,"docTypeId",2);c([n({name:"doc_type_name"})],o.prototype,"docTypeName",2);c([n({name:"module_guid"})],o.prototype,"moduleGuid",2);c([n({name:"doc_guid"})],o.prototype,"docGuid",2);c([n({name:"doc_id"})],o.prototype,"docId",2);c([n({name:"doc_type_controller"})],o.prototype,"docTypeController",2);c([n({name:"doc_type_action"})],o.prototype,"docTypeAction",2);c([n({name:"doc_type_enabled"})],o.prototype,"docTypeEnabled",2);c([n({name:"enable_notification"})],o.prototype,"enableNotification",2);c([n({name:"nk_name"})],o.prototype,"nkName",2);c([n({name:"doc_type_icon"})],o.prototype,"docTypeIcon",2);o=c([_({name:"doc_type",synchronize:!1})],o);class M extends D{constructor(){super(),this.b=new u,this.cRules={required:["docName","docFrom","docTypeId","companyId"],noDuplicate:[]}}async validateCreate(e){for(const s of this.cRules.required)if(!e[s])return{data:!1,state:!1,message:`Missing required field: ${s}`};const r={where:{docName:e.docName,docTypeId:e.docTypeId}},a={serviceModel:y,docName:"Validate Duplicate Doc",dSource:1,cmd:{query:r}},t=await this.b.read(null,null,a);return"state"in t&&"data"in t?!t.state||!t.data?{data:!1,state:!1,message:"Validation failed"}:t.data.length>0?{data:!0,state:!0,message:"Validation passed"}:{data:!1,state:!1,message:"Validation failed"}:{data:!1,state:!1,message:"Validation failed"}}async afterCreate(e){const r={where:{docGuid:e.docGuid}},a={serviceModel:y,docName:"Fetch Created Doc",dSource:1,cmd:{query:r}},t=await this.b.read(null,null,a);return"state"in t?t:i}async getDoc(e){if(!e||!e.where||Object.keys(e.where).length===0)return{data:null,state:!1,message:'Invalid query: "where" condition is required'};const r={serviceModel:y,docName:"Read Doc",cmd:{action:"find",query:e},dSource:1};try{const a=await this.b.read(null,null,r);return"state"in a?a:i}catch(a){return g.error(`DocService.getDoc() - Error: ${a.message}`),{data:null,state:!1,message:`Error retrieving Doc: ${a.message}`}}}async getDocTypeId(e,r,a){let t=0;e.post.m;const s=e.post.c,d=e.post.a,p=await this.getDocTypeByName(e,r,`${s}_${d}`);if(!p.state||!p.data)return NaN;const m=p.data;return m.length>0?t=m[0].docTypeId:t=(await this.createDocType(a)).docTypeId,await t}async createDocType(e){const r=new u,a={serviceModel:o,docName:"Create DocType",dSource:1,data:e},t=await r.create(null,null,a);return"state"in t&&t.state?t:i}beforeUpdate(e){return e.update.CoopEnabled===""&&(e.update.CoopEnabled=null),e}async getDocTypeByName(e,r,a){const t=new u,s={serviceModel:o,docName:"DocService::getDocTypeByName",cmd:{action:"find",query:{where:{docTypeName:`${a}`}}},dSource:1},d=await t.read(null,null,s);return"state"in d?await d:i}}export{M as DocService};
