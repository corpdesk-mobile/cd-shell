import"./index-ks-lB4SW.js";import{T as c,I as p,O as f,g as s,E as l,F as y,D as h,B as E,a as R,R as C}from"./index-jqxAftuh.js";import{aA as it,aI as ut,aB as ct,L as yt,aP as ft,aR as lt,aX as dt,a8 as gt,P as mt,W as pt,X as ht,av as Et,ab as Rt,aQ as Ct,c as Tt,ah as bt,C as Mt,a6 as wt,a9 as vt,_ as Nt,ao as At,d as It,j as St,al as Lt,ag as Bt,aE as xt,aH as Dt,aG as $t,a2 as Ft,a1 as Jt,ae as _t,aF as Ut,az as kt,am as Pt,ax as qt,aC as zt,ay as Vt,ap as Qt,e as jt,h as Xt,aj as Zt,a5 as Kt,V as Yt,l as Gt,m as Wt,aa as Ht,af as Ot,ad as er,aL as tr,M as rr,aM as nr,aN as or,b4 as ar,a3 as sr,aU as ir,aw as ur,ar as cr,ai as yr,au as fr,ak as lr,a4 as dr,aV as gr,an as mr,aO as pr,Q as hr,aq as Er,k as Rr,at as Cr,a7 as Tr,f as br,aJ as Mr,ac as wr,aT as vr,S as Nr,aD as Ar,aS as Ir,aW as Sr,as as Lr,N as Br,b2 as xr,aY as Dr,aZ as $r,a_ as Fr,a$ as Jr,b0 as _r,b1 as Ur,a0 as kr,$ as Pr,aK as qr,Z as zr,n as Vr,U as Qr,i as jr,Y as Xr,b3 as Zr,q as Kr,r as Yr,H as Gr,t as Wr,p as Hr,o as Or,A as en,K as tn,v as rn,w as nn,G as on,y as an,x as sn,z as un,J as cn}from"./index-jqxAftuh.js";import"./__vite-browser-external_path-SE2pKm0_.js";import"./__vite-browser-external_fs-DMuOfmem.js";import"./index-DIRyWZMo.js";import"./dayjs.min-D3AfAJgg.js";class S extends c{constructor(e,r){super(`Cannot get reflected type for a "${r}" method's parameter of "${e.name}" class. Make sure you have turned on an "emitDecoratorMetadata": true option in tsconfig.json. Also make sure you have imported "reflect-metadata" on top of the main entry file in your application.`)}}class L extends c{constructor(e){super(`Connection with ${e} database is not established. Check connection configuration.`)}}class B extends c{constructor(e,r,n){super(e+" metadata already exists for the class constructor "+JSON.stringify(r)+(n?" on property "+n:". If you previously renamed or moved entity class, make sure that compiled version of old entity class source wasn't left in the compiler output directory."))}}class T extends c{constructor(e,r){super(`Primary column ${e.constructor.name}#${r} cannot be nullable. Its not allowed for primary keys. Try to remove nullable option.`)}}class x extends c{constructor(e){super(`Cannot get a Repository for "${e} connection, because connection with the database is not established yet. Call connection#connect method to establish connection.`)}}class D extends c{constructor(e,r){super(`Using JoinTable on ${e.name}#${r.propertyName} is wrong. ${e.name}#${r.propertyName} has ${r.relationType} relation, however you can use JoinTable only on many-to-many relations.`)}}class $ extends c{constructor(e,r){super(),r.inverseRelation?this.message=`JoinColumn is missing on both sides of ${e.name}#${r.propertyName} and ${r.inverseEntityMetadata.name}#${r.inverseRelation.propertyName} one-to-one relationship. You need to put JoinColumn decorator on one of the sides.`:this.message=`JoinColumn is missing on ${e.name}#${r.propertyName} one-to-one relationship. You need to put JoinColumn decorator on it.`}}class F extends c{constructor(e){super(`Cannot get entity manager for "${e}" connection because connection is not yet established.`)}}class J extends c{constructor(e,r){super(e+" metadata with such name "+r+" already exists. Do you apply decorator twice? Or maybe try to change a name?")}}class _ extends c{constructor(e){super();let r;p.isEntitySchema(e)?r=e.options.name:typeof e=="function"||f.isObject(e)&&"name"in e?r=e.name:r=e,this.message=`Repository of the "${r}" class is not a TreeRepository. Try to apply @Tree decorator on your entity.`}}class U extends c{constructor(e,r){super(),r.inverseRelation?this.message=`JoinTable is missing on both sides of ${e.name}#${r.propertyName} and ${r.inverseEntityMetadata.name}#${r.inverseRelation.propertyName} many-to-many relationship. You need to put decorator decorator on one of the sides.`:this.message=`JoinTable is missing on ${e.name}#${r.propertyName} many-to-many relationship. You need to put JoinTable decorator on it.`}}class k extends c{constructor(e,r){super(`Using JoinColumn is allowed only on one side of the one-to-one relationship. Both ${e.name}#${r.propertyName} and ${r.inverseEntityMetadata.name}#${r.inverseRelation.propertyName} has JoinTable decorators. Choose one of them and left JoinTable decorator only on it.`)}}class P extends c{constructor(e,r){super(`Using JoinTable is allowed only on one side of the many-to-many relationship. Both ${e.name}#${r.propertyName} and ${r.inverseEntityMetadata.name}#${r.inverseRelation.propertyName} has JoinTable decorators. Choose one of them and left JoinColumn decorator only on it.`)}}class q extends c{constructor(){super("Internal error. Persisted entity was not found in the list of prepared operated entities.")}}class z extends c{constructor(e,r){super(`Using JoinColumn on ${e.name}#${r.propertyName} is wrong. You can use JoinColumn only on one-to-one and many-to-one relations.`)}}class m extends c{constructor(e,r){super(`Column type for ${e.constructor.name}#${r} is not defined and cannot be guessed. Make sure you have turned on an "emitDecoratorMetadata": true option in tsconfig.json. Also make sure you have imported "reflect-metadata" on top of the main entry file in your application (before any entity imported).If you are using JavaScript instead of TypeScript you must explicitly provide a column type.`)}}function V(t,e){return function(r,n){let o;typeof t=="string"||typeof t=="function"?o=t:t&&(e=t,o=t.type),e||(e={});const a=Reflect&&Reflect.getMetadata?Reflect.getMetadata("design:type",r,n):void 0;if(!o&&a&&(o=a),!e.type&&o&&(e.type=o),e.type==="hstore"&&!e.hstoreType&&(e.hstoreType=a===Object?"object":"string"),typeof t=="function")s().embeddeds.push({target:r.constructor,propertyName:n,isArray:a===Array||e.array===!0,prefix:e.prefix!==void 0?e.prefix:void 0,type:t});else{if(!e.type)throw new m(r,n);e.unique===!0&&s().uniques.push({target:r.constructor,columns:[n]}),s().columns.push({target:r.constructor,propertyName:n,mode:"regular",options:e}),e.generated&&s().generations.push({target:r.constructor,propertyName:n,strategy:typeof e.generated=="string"?e.generated:"increment"})}}}function Q(t){return function(e,r){s().columns.push({target:e.constructor,propertyName:r,mode:"createDate",options:t||{}})}}function j(t){return function(e,r){s().columns.push({target:e.constructor,propertyName:r,mode:"deleteDate",options:t||{}})}}function X(t,e){const r={};let n;return t?(typeof t=="string"&&(n=t),f.isObject(t)&&(n="increment",Object.assign(r,t))):n="increment",f.isObject(e)&&Object.assign(r,e),function(o,a){r.type||(n==="increment"||n==="identity"?r.type=Number:n==="uuid"?r.type="uuid":n==="rowid"&&(r.type="int")),r.primary=!0,s().columns.push({target:o.constructor,propertyName:a,mode:"regular",options:r}),s().generations.push({target:o.constructor,propertyName:a,strategy:n})}}function Z(t,e){return function(r,n){let o;typeof t=="string"||t===String||t===Boolean||t===Number?o=t:e=Object.assign({},t),e||(e={});const a=Reflect&&Reflect.getMetadata?Reflect.getMetadata("design:type",r,n):void 0;if(!o&&a&&(o=a),!e.type&&o&&(e.type=o),!e.type)throw new m(r,n);if(e.nullable)throw new T(r,n);e.primary=!0,s().columns.push({target:r.constructor,propertyName:n,mode:"regular",options:e}),e.generated&&s().generations.push({target:r.constructor,propertyName:n,strategy:typeof e.generated=="string"?e.generated:"increment"})}}function K(t){return function(e,r){s().columns.push({target:e.constructor,propertyName:r,mode:"updateDate",options:t||{}})}}function Y(t){return function(e,r){s().columns.push({target:e.constructor,propertyName:r,mode:"version",options:t||{}})}}function G(t,e){return function(r,n){let o;if(typeof t=="string"?o=t:(e=t,o=e.type),!(e!=null&&e.query))throw new Error("Column options must be defined for calculated columns.");const a=Reflect&&Reflect.getMetadata?Reflect.getMetadata("design:type",r,n):void 0;if(!o&&a&&(o=a),o&&(e.type=o),e.type==="hstore"&&!e.hstoreType&&(e.hstoreType=a===Object?"object":"string"),!e.type)throw new m(r,n);s().columns.push({target:r.constructor,propertyName:n,mode:"virtual-property",options:e||{}})}}function W(t){return function(e,r){s().columns.push({target:e.constructor,propertyName:r,mode:"regular",options:t||{}})}}function H(t){return function(e,r){t||(t={}),t.primary=!0,t.name||(t.name="_id"),s().columns.push({target:e.constructor,propertyName:r,mode:"objectId",options:t})}}function O(){return function(t,e){s().entityListeners.push({target:t.constructor,propertyName:e,type:l.AFTER_INSERT})}}function ee(){return function(t,e){s().entityListeners.push({target:t.constructor,propertyName:e,type:l.AFTER_LOAD})}}function te(){return function(t,e){s().entityListeners.push({target:t.constructor,propertyName:e,type:l.AFTER_REMOVE})}}function re(){return function(t,e){s().entityListeners.push({target:t.constructor,propertyName:e,type:l.AFTER_SOFT_REMOVE})}}function ne(){return function(t,e){s().entityListeners.push({target:t.constructor,propertyName:e,type:l.AFTER_RECOVER})}}function oe(){return function(t,e){s().entityListeners.push({target:t.constructor,propertyName:e,type:l.AFTER_UPDATE})}}function ae(){return function(t,e){s().entityListeners.push({target:t.constructor,propertyName:e,type:l.BEFORE_INSERT})}}function se(){return function(t,e){s().entityListeners.push({target:t.constructor,propertyName:e,type:l.BEFORE_REMOVE})}}function ie(){return function(t,e){s().entityListeners.push({target:t.constructor,propertyName:e,type:l.BEFORE_SOFT_REMOVE})}}function ue(){return function(t,e){s().entityListeners.push({target:t.constructor,propertyName:e,type:l.BEFORE_RECOVER})}}function ce(){return function(t,e){s().entityListeners.push({target:t.constructor,propertyName:e,type:l.BEFORE_UPDATE})}}function ye(){return function(t){s().entitySubscribers.push({target:t})}}function fe(t){return function(e,r){(Array.isArray(t)?t:[t||{}]).forEach(o=>{s().joinColumns.push({target:e.constructor,propertyName:r,name:o.name,referencedColumnName:o.referencedColumnName,foreignKeyConstraintName:o.foreignKeyConstraintName})})}}function le(t){return function(e,r){t=t||{},s().joinTables.push({target:e.constructor,propertyName:r,name:t.name,joinColumns:t&&t.joinColumn?[t.joinColumn]:t.joinColumns,inverseJoinColumns:t&&t.inverseJoinColumn?[t.inverseJoinColumn]:t.inverseJoinColumns,schema:t&&t.schema?t.schema:void 0,database:t&&t.database?t.database:void 0,synchronize:!(t&&t.synchronize===!1)})}}function de(t,e,r){let n;return f.isObject(e)?r=e:n=e,function(o,a){r||(r={});let i=r.lazy===!0;if(!i&&Reflect&&Reflect.getMetadata){const u=Reflect.getMetadata("design:type",o,a);u&&typeof u.name=="string"&&u.name.toLowerCase()==="promise"&&(i=!0)}s().relations.push({target:o.constructor,propertyName:a,relationType:"many-to-many",isLazy:i,type:t,inverseSideProperty:n,options:r})}}function ge(t,e,r){let n;return f.isObject(e)?r=e:n=e,function(o,a){r||(r={});let i=r&&r.lazy===!0;if(!i&&Reflect&&Reflect.getMetadata){const u=Reflect.getMetadata("design:type",o,a);u&&typeof u.name=="string"&&u.name.toLowerCase()==="promise"&&(i=!0)}s().relations.push({target:o.constructor,propertyName:a,relationType:"many-to-one",isLazy:i,type:t,inverseSideProperty:n,options:r})}}function me(t,e,r){return function(n,o){r||(r={});let a=r&&r.lazy===!0;if(!a&&Reflect&&Reflect.getMetadata){const i=Reflect.getMetadata("design:type",n,o);i&&typeof i.name=="string"&&i.name.toLowerCase()==="promise"&&(a=!0)}s().relations.push({target:n.constructor,propertyName:o,isLazy:a,relationType:"one-to-many",type:t,inverseSideProperty:e,options:r})}}function pe(t,e,r){let n;return f.isObject(e)?r=e:n=e,function(o,a){r||(r={});let i=!!(r&&r.lazy===!0);if(!i&&Reflect&&Reflect.getMetadata){const u=Reflect.getMetadata("design:type",o,a);u&&typeof u.name=="string"&&u.name.toLowerCase()==="promise"&&(i=!0)}s().relations.push({target:o.constructor,propertyName:a,isLazy:i,relationType:"one-to-one",type:t,inverseSideProperty:n,options:r})}}function he(t,e,r){return function(n,o){s().relationCounts.push({target:n.constructor,propertyName:o,relation:t,alias:e,queryBuilderFactory:r})}}function Ee(t,e,r){return function(n,o){s().relationIds.push({target:n.constructor,propertyName:o,relation:t,alias:e,queryBuilderFactory:r})}}function Re(t,e){const r=(f.isObject(t)?t:e)||{},n=typeof t=="string"?t:r.name;return function(o){s().tables.push({target:o,name:n,type:"regular",orderBy:r.orderBy?r.orderBy:void 0,engine:r.engine?r.engine:void 0,database:r.database?r.database:void 0,schema:r.schema?r.schema:void 0,synchronize:r.synchronize,withoutRowid:r.withoutRowid,comment:r.comment?r.comment:void 0})}}function Ce(t){return function(e){s().tables.push({target:e,type:"entity-child"}),typeof t<"u"&&s().discriminatorValues.push({target:e,value:t})}}function Te(t){return function(e){s().inheritances.push({target:e,pattern:t&&t.pattern?t.pattern:"STI",column:t&&t.column?typeof t.column=="string"?{name:t.column}:t.column:void 0})}}function be(t,e){const r=(f.isObject(t)?t:e)||{},n=typeof t=="string"?t:r.name;return function(o){s().tables.push({target:o,name:n,expression:r.expression,dependsOn:r.dependsOn?new Set(r.dependsOn):void 0,type:"view",database:r.database?r.database:void 0,schema:r.schema?r.schema:void 0,synchronize:r.synchronize!==!1,materialized:!!r.materialized})}}function Me(){return function(t,e){s().columns.push({target:t.constructor,propertyName:e,mode:"treeLevel",options:{}})}}function we(t){return function(e,r){t||(t={});const n=Reflect&&Reflect.getMetadata?Reflect.getMetadata("design:type",e,r):void 0,o=n&&typeof n.name=="string"&&n.name.toLowerCase()==="promise"||!1;s().relations.push({isTreeParent:!0,target:e.constructor,propertyName:r,isLazy:o,relationType:"many-to-one",type:()=>e.constructor,options:t})}}function ve(t){return function(e,r){t||(t={});const n=Reflect&&Reflect.getMetadata?Reflect.getMetadata("design:type",e,r):void 0,o=n&&typeof n.name=="string"&&n.name.toLowerCase()==="promise"||!1;s().relations.push({isTreeChildren:!0,target:e.constructor,propertyName:r,isLazy:o,relationType:"one-to-many",type:()=>e.constructor,options:t})}}function Ne(t,e){return function(r){s().trees.push({target:r,type:t,options:t==="closure-table"?e:void 0})}}function Ae(t,e,r){const n=typeof t=="string"?t:void 0,o=typeof t=="string"?e:t;let a=f.isObject(t)&&!Array.isArray(t)?t:r;return a||(a=f.isObject(e)&&!Array.isArray(e)?e:r),function(i,u){s().indices.push({target:u?i.constructor:i,name:n,columns:u?[u]:o,synchronize:!(a&&a.synchronize===!1),where:a?a.where:void 0,unique:!!(a&&a.unique),spatial:!!(a&&a.spatial),fulltext:!!(a&&a.fulltext),nullFiltered:!!(a&&a.nullFiltered),parser:a?a.parser:void 0,sparse:!!(a&&a.sparse),background:!!(a&&a.background),concurrent:!!(a&&a.concurrent),expireAfterSeconds:a?a.expireAfterSeconds:void 0})}}function Ie(t,e,r,n){const o=typeof e=="string"||typeof e=="function"?e:void 0,a=Array.isArray(e)?e:void 0,i=Array.isArray(r)?r:void 0,u=f.isObject(e)&&!Array.isArray(e)?e:f.isObject(r)&&!Array.isArray(r)?r:n;return function(d,g){s().foreignKeys.push({target:g?d.constructor:d,propertyName:g,type:t,inverseSide:o,columnNames:a,referencedColumnNames:i,...u})}}function Se(t,e,r){const n=typeof t=="string"?t:void 0,o=typeof t=="string"?e:t;let a=f.isObject(t)&&!Array.isArray(t)?t:r;return a||(a=f.isObject(t)&&!Array.isArray(e)?e:r),function(i,u){let d=o;if(u!==void 0)switch(typeof u){case"string":d=[u];break;case"symbol":d=[u.toString()];break}const g={target:u?i.constructor:i,name:n,columns:d,deferrable:a?a.deferrable:void 0};s().uniques.push(g)}}function Le(t,e){const r=e?t:void 0,n=e||t;if(!n)throw new c("Check expression is required");return function(o,a){s().checks.push({target:a?o.constructor:o,name:r,expression:n})}}function Be(t,e){const r=e?t:void 0,n=e||t;if(!n)throw new c("Exclusion expression is required");return function(o,a){s().exclusions.push({target:a?o.constructor:o,name:r,expression:n})}}function xe(t="increment"){return function(e,r){s().generations.push({target:e.constructor,propertyName:r,strategy:t})}}function De(t){return function(e){s().entityRepositories.push({target:e,entity:t})}}function $e(...t){return new y("and",t,!0,!0)}function Fe(...t){return new y("or",t,!0,!0)}function Je(t){return new y("any",t)}function _e(t){return new y("arrayContainedBy",t)}function Ue(t){return new y("arrayContains",t)}function ke(t){return new y("arrayOverlap",t)}function Pe(t,e){return new y("between",[t,e],!0,!0)}class b extends y{constructor(e){super("equal",e),this["@instanceof"]=Symbol.for("EqualOperator")}}function qe(t){return new b(t)}function ze(){return new y("isNull",void 0,!1)}function Ve(t){return new y("lessThan",t)}function Qe(t){return new y("lessThanOrEqual",t)}function je(t){return new y("ilike",t)}function Xe(t){return new y("like",t)}function Ze(t){return new y("moreThan",t)}function Ke(t){return new y("moreThanOrEqual",t)}function Ye(t){return new y("not",t)}function Ge(t,e){return typeof t!="function"?new y("raw",t,!1):new y("raw",[],!0,!0,t,e)}function We(t){return new y("jsonContains",t)}class He{hasId(){return this.constructor.getRepository().hasId(this)}save(e){return this.constructor.getRepository().save(this,e)}remove(e){return this.constructor.getRepository().remove(this,e)}softRemove(e){return this.constructor.getRepository().softRemove(this,e)}recover(e){return this.constructor.getRepository().recover(this,e)}async reload(){const e=this.constructor,r=e.getRepository().metadata.getEntityIdMap(this);if(!r)throw new Error("Entity doesn't have id-s set, cannot reload entity");const n=await e.getRepository().findOneByOrFail(r);f.assign(this,n)}static useDataSource(e){this.dataSource=e}static getRepository(){const e=this.dataSource;if(!e)throw new Error("DataSource is not set for this entity.");return e.getRepository(this)}static get target(){return this.getRepository().target}static hasId(e){return this.getRepository().hasId(e)}static getId(e){return this.getRepository().getId(e)}static createQueryBuilder(e){return this.getRepository().createQueryBuilder(e)}static create(e){return this.getRepository().create(e)}static merge(e,...r){return this.getRepository().merge(e,...r)}static preload(e){return this.getRepository().preload(e)}static save(e,r){return this.getRepository().save(e,r)}static remove(e,r){return this.getRepository().remove(e,r)}static softRemove(e,r){return this.getRepository().softRemove(e,r)}static insert(e){return this.getRepository().insert(e)}static update(e,r){return this.getRepository().update(e,r)}static upsert(e,r){return this.getRepository().upsert(e,r)}static delete(e){return this.getRepository().delete(e)}static exists(e){return this.getRepository().exists(e)}static existsBy(e){return this.getRepository().existsBy(e)}static count(e){return this.getRepository().count(e)}static countBy(e){return this.getRepository().countBy(e)}static sum(e,r){return this.getRepository().sum(e,r)}static average(e,r){return this.getRepository().average(e,r)}static minimum(e,r){return this.getRepository().minimum(e,r)}static maximum(e,r){return this.getRepository().maximum(e,r)}static find(e){return this.getRepository().find(e)}static findBy(e){return this.getRepository().findBy(e)}static findAndCount(e){return this.getRepository().findAndCount(e)}static findAndCountBy(e){return this.getRepository().findAndCountBy(e)}static findByIds(e){return this.getRepository().findByIds(e)}static findOne(e){return this.getRepository().findOne(e)}static findOneBy(e){return this.getRepository().findOneBy(e)}static findOneById(e){return this.getRepository().findOneById(e)}static findOneOrFail(e){return this.getRepository().findOneOrFail(e)}static findOneByOrFail(e){return this.getRepository().findOneByOrFail(e)}static query(e,r){return this.getRepository().query(e,r)}static clear(){return this.getRepository().clear()}}class Oe extends h{}class et extends E{constructor(){super(...arguments),this["@instanceof"]=Symbol.for("NotBrackets")}}class tt extends R{constructor(e="hash"){super(),this.IDENTIFIER_MAX_SIZE=30,this.DEFAULT_COLUMN_PREFIX="COL_",this.shortenStrategy=e}columnName(e,r,n){const o=super.columnName(e,r,n);if(this.shortenStrategy==="truncate")return this.truncateIdentifier(o);if(this.shortenStrategy==="hash")return this.hashIdentifier(o,this.DEFAULT_COLUMN_PREFIX);throw new c("Invalid shortenStrategy")}hashIdentifier(e,r){if(r.length>=this.IDENTIFIER_MAX_SIZE)throw new c("Prefix must be shorter than IDENTIFIER_MAX_SIZE");return r+C.sha1(e).substring(0,this.IDENTIFIER_MAX_SIZE-r.length)}truncateIdentifier(e){return e.length>this.IDENTIFIER_MAX_SIZE?e.substring(0,this.IDENTIFIER_MAX_SIZE):e}}class rt{constructor(e){this.options=e,this["@instanceof"]=Symbol.for("EntitySchema")}}class nt{}class ot{}export{it as AbstractLogger,ut as AbstractRepository,ct as AdvancedConsoleLogger,O as AfterInsert,ee as AfterLoad,ne as AfterRecover,te as AfterRemove,re as AfterSoftRemove,oe as AfterUpdate,yt as AlreadyHasActiveConnectionError,$e as And,Je as Any,_e as ArrayContainedBy,Ue as ArrayContains,ke as ArrayOverlap,ft as AuroraMysqlDriver,lt as AuroraPostgresDriver,He as BaseEntity,ae as BeforeInsert,ue as BeforeRecover,se as BeforeRemove,ie as BeforeSoftRemove,ce as BeforeUpdate,dt as BetterSqlite3Driver,Pe as Between,E as Brackets,gt as CannotAttachTreeChildrenEntityError,mt as CannotConnectAlreadyConnectedError,pt as CannotCreateEntityIdMapError,ht as CannotDetermineEntityError,Et as CannotExecuteNotConnectedError,F as CannotGetEntityManagerNotConnectedError,S as CannotReflectMethodParameterTypeError,Le as Check,Ce as ChildEntity,Rt as CircularRelationsError,Ct as CockroachDriver,V as Column,m as ColumnTypeUndefinedError,Oe as Connection,L as ConnectionIsNotSetError,Tt as ConnectionManager,bt as ConnectionNotFoundError,Mt as ConnectionOptionsReader,Q as CreateDateColumn,wt as CustomRepositoryCannotInheritRepositoryError,vt as CustomRepositoryDoesNotHaveEntityError,Nt as CustomRepositoryNotFoundError,h as DataSource,At as DataTypeNotSupportedError,R as DefaultNamingStrategy,j as DeleteDateColumn,It as DeleteQueryBuilder,St as DeleteResult,Lt as DriverOptionNotSetError,Bt as DriverPackageNotInstalledError,xt as DummyLogger,Re as Entity,Dt as EntityManager,$t as EntityMetadata,Ft as EntityMetadataNotFoundError,Jt as EntityNotFoundError,_t as EntityPropertyNotFoundError,De as EntityRepository,rt as EntitySchema,nt as EntitySchemaEmbeddedColumnOptions,ot as EntitySchemaOptions,qe as Equal,b as EqualOperator,ye as EventSubscriber,Be as Exclusion,Ut as FileLogger,y as FindOperator,kt as FindOptionsUtils,Pt as FindRelationsNotFoundError,qt as ForbiddenTransactionModeOverrideError,Ie as ForeignKey,zt as FormattedConsoleLogger,xe as Generated,je as ILike,Vt as In,Ae as Index,Qt as InitializedRelationError,jt as InsertQueryBuilder,Xt as InsertResult,Zt as InsertValuesMissingError,p as InstanceChecker,ze as IsNull,fe as JoinColumn,le as JoinTable,We as JsonContains,tt as LegacyOracleNamingStrategy,Ve as LessThan,Qe as LessThanOrEqual,Xe as Like,Kt as LimitOnUpdateNotSupportedError,Yt as LockNotSupportedOnGivenDriverError,de as ManyToMany,ge as ManyToOne,B as MetadataAlreadyExistsError,J as MetadataWithSuchNameAlreadyExistsError,Gt as Migration,Wt as MigrationExecutor,Ht as MissingDeleteDateColumnError,Ot as MissingDriverError,$ as MissingJoinColumnError,U as MissingJoinTableError,er as MissingPrimaryColumnError,tr as MongoDriver,rr as MongoEntityManager,nr as MongoQueryRunner,or as MongoRepository,Ze as MoreThan,Ke as MoreThanOrEqual,ar as MssqlParameter,sr as MustBeEntityError,ir as MysqlDriver,x as NoConnectionForRepositoryError,ur as NoConnectionOptionError,cr as NoNeedToReleaseEntityManagerError,yr as NoVersionOrUpdateDateColumnError,Ye as Not,et as NotBrackets,H as ObjectIdColumn,fr as OffsetWithoutLimitNotSupportedError,me as OneToMany,pe as OneToOne,lr as OptimisticLockCanNotBeUsedError,dr as OptimisticLockVersionMismatchError,Fe as Or,gr as OracleDriver,q as PersistedEntityNotFoundError,mr as PessimisticLockTransactionRequiredError,pr as PostgresDriver,Z as PrimaryColumn,T as PrimaryColumnCannotBeNullableError,X as PrimaryGeneratedColumn,hr as QueryBuilder,Er as QueryFailedError,Rr as QueryResult,Cr as QueryRunnerAlreadyReleasedError,Tr as QueryRunnerProviderAlreadyReleasedError,Ge as Raw,he as RelationCount,Ee as RelationId,br as RelationQueryBuilder,Mr as Repository,_ as RepositoryNotTreeError,wr as ReturningStatementNotSupportedError,vr as SapDriver,Nr as SelectQueryBuilder,Ar as SimpleConsoleLogger,Ir as SqlServerDriver,Sr as SqliteDriver,Lr as SubjectRemovedAndUpdatedError,Br as SubjectWithoutIdentifierError,xr as Table,Dr as TableCheck,$r as TableColumn,Fr as TableExclusion,Jr as TableForeignKey,_r as TableIndex,Te as TableInheritance,Ur as TableUnique,kr as TransactionAlreadyStartedError,Pr as TransactionNotStartedError,Ne as Tree,ve as TreeChildren,Me as TreeLevelColumn,we as TreeParent,qr as TreeRepository,zr as TreeRepositoryNotSupportedError,Vr as TreeRepositoryUtils,c as TypeORMError,Se as Unique,K as UpdateDateColumn,Qr as UpdateQueryBuilder,jr as UpdateResult,Xr as UpdateValuesMissingError,z as UsingJoinColumnIsNotAllowedError,k as UsingJoinColumnOnlyOnOneSideAllowedError,D as UsingJoinTableIsNotAllowedError,P as UsingJoinTableOnlyOnOneSideAllowedError,Y as VersionColumn,Zr as View,W as ViewColumn,be as ViewEntity,G as VirtualColumn,Kr as createConnection,Yr as createConnections,Gr as createQueryBuilder,Wr as getConnection,Hr as getConnectionManager,Or as getConnectionOptions,en as getCustomRepository,tn as getFromContainer,rn as getManager,s as getMetadataArgsStorage,nn as getMongoManager,on as getMongoRepository,an as getRepository,sn as getSqljsManager,un as getTreeRepository,cn as useContainer};
