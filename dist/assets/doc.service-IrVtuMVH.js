const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-D3nHpiIA.js","assets/index-BRIKc63m.js","assets/index-C_EefWij.css","assets/index-CCs3NjLB.js","assets/dayjs.min-8nNmiLn8.js"])))=>i.map(i=>d[i]);
import{_ as D}from"./index-BRIKc63m.js";import{B as p,C as u,P as w,a as i,E as L,D as g}from"./index-D3nHpiIA.js";import f from"./index-JiKw9JSs.js";import{d as h}from"./dayjs.min-8nNmiLn8.js";import"./index-CCs3NjLB.js";class E{constructor(){}async create(e,a,t){const s=await new p().create(e,a,t);return"state"in s&&s.state?s:u}async createI(e,a,t){return await new p().createI(e,a,t)}async read(e,a,t){const s=await new p().read(e,e,t);return"state"in s?s:u}async update(e,a,t){const s=await new p().update(e,e,t);return"state"in s?s:u}async updateI(e,a,t){return new p().updateI(e,a,t)}async delete(e,a,t){const s=await new p().delete(e,e,t);return"state"in s?s:u}}const r=class r{constructor(){this.init()}init(){}static formatMessage(e,a){return`[${h().format("YYYY-MM-DD HH:mm:ss")}] ${e} ${a}`}static info(e,a){if(r.debugLevel>=r.LOG_LEVELS.INFO){const t=a?`${e} | Context: ${a}`:e;console.log(this.formatMessage(f.blue("ℹ️"),t))}}static success(e,a){if(r.debugLevel>=r.LOG_LEVELS.INFO){const t=a?`${e} | Context: ${a}`:e;console.log(this.formatMessage(f.green("ℹ✨"),f.green(t)))}}static warning(e,a){if(r.debugLevel>=r.LOG_LEVELS.WARNING){const t=a?`${e} | Context: ${a}`:e;console.log(this.formatMessage(f.yellow("ℹ⚠️"),t))}}static error(e,a){if(r.debugLevel>=r.LOG_LEVELS.ERROR){const t=a?`${e} | Context: ${a}`:e;console.log(this.formatMessage(f.red("❌"),t))}}static debug(e,a){if(r.debugLevel>=r.LOG_LEVELS.DEBUG){const t=a?`${e} | Context: ${a}`:e;console.log(this.formatMessage(f.cyan("🛠️"),t))}}static setDebugLevel(e){try{e=Number(e),console.log("CdLog::setDebugLevel()/log level:",e),r.info(`starting NotifierController:setDebugLevel()/${e}`),typeof e!="number"||e>4||e<0?(console.log("CdLog::setDebugLevel()/02:"),r.error("Invalid debug level. Using default level (0)."),r.debugLevel=0):(console.log("CdLog::setDebugLevel()/03:"),r.info(`debug level set to ${e}`),r.debugLevel=e)}catch(a){console.error(`could not set the Debug level. Error: ${a.message}`)}}static getDebugLevel(){return r.debugLevel}static safeStringify(e,a=2){const t=new WeakSet;return JSON.stringify(e,(o,s)=>{if(typeof s=="object"&&s!==null){if(t.has(s))return"[Circular]";t.add(s)}return s},a)}};r.debugLevel=0,r.LOG_LEVELS={NONE:0,ERROR:1,WARNING:2,INFO:3,DEBUG:4};let b=r;var I=Object.defineProperty,N=Object.getOwnPropertyDescriptor,c=(m,e,a,t)=>{for(var o=t>1?void 0:t?N(e,a):e,s=m.length-1,d;s>=0;s--)(d=m[s])&&(o=(t?d(e,a,o):d(o))||o);return t&&o&&I(e,a,o),o};let n=class{};c([w({name:"doc_type_id"})],n.prototype,"docTypeId",2);c([i({name:"doc_type_name"})],n.prototype,"docTypeName",2);c([i({name:"module_guid"})],n.prototype,"moduleGuid",2);c([i({name:"doc_guid"})],n.prototype,"docGuid",2);c([i({name:"doc_id"})],n.prototype,"docId",2);c([i({name:"doc_type_controller"})],n.prototype,"docTypeController",2);c([i({name:"doc_type_action"})],n.prototype,"docTypeAction",2);c([i({name:"doc_type_enabled"})],n.prototype,"docTypeEnabled",2);c([i({name:"enable_notification"})],n.prototype,"enableNotification",2);c([i({name:"nk_name"})],n.prototype,"nkName",2);c([i({name:"doc_type_icon"})],n.prototype,"docTypeIcon",2);n=c([L({name:"doc_type",synchronize:!1})],n);class O extends E{constructor(){super(),this.cRules={required:["docName","docFrom","docTypeId","companyId"],noDuplicate:[]}}async validateCreate(e){for(const s of this.cRules.required)if(!e[s])return{data:!1,state:!1,message:`Missing required field: ${s}`};const a={where:{docName:e.docName,docTypeId:e.docTypeId}},t={serviceModel:g,docName:"Validate Duplicate Doc",dSource:1,cmd:{query:a}},o=await this.b.read(null,null,t);return"state"in o&&"data"in o?!o.state||!o.data?{data:!1,state:!1,message:"Validation failed"}:o.data.length>0?{data:!0,state:!0,message:"Validation passed"}:{data:!1,state:!1,message:"Validation failed"}:{data:!1,state:!1,message:"Validation failed"}}async afterCreate(e){const a={where:{docGuid:e.docGuid}},t={serviceModel:g,docName:"Fetch Created Doc",dSource:1,cmd:{query:a}},o=await this.b.read(null,null,t);return"state"in o?o:u}async getDoc(e){if(!e||!e.where||Object.keys(e.where).length===0)return{data:null,state:!1,message:'Invalid query: "where" condition is required'};const a={serviceModel:g,docName:"Read Doc",cmd:{action:"find",query:e},dSource:1};try{const t=await this.b.read(null,null,a);return"state"in t?t:u}catch(t){return b.error(`DocService.getDoc() - Error: ${t.message}`),{data:null,state:!1,message:`Error retrieving Doc: ${t.message}`}}}async getDocTypeId(e,a,t){let o=0;e.post.m;const s=e.post.c,d=e.post.a,l=await this.getDocTypeByName(e,a,`${s}_${d}`);if(!l.state||!l.data)return NaN;const y=l.data;return y.length>0?o=y[0].docTypeId:o=(await this.createDocType(t)).docTypeId,await o}async createDocType(e){const{BaseService:a}=await D(async()=>{const{BaseService:d}=await import("./index-D3nHpiIA.js").then(l=>l.bc);return{BaseService:d}},__vite__mapDeps([0,1,2,3,4])),t=new a,o={serviceModel:n,docName:"Create DocType",dSource:1,data:e},s=await t.create(null,null,o);return"state"in s&&s.state?s:u}beforeUpdate(e){return e.update.CoopEnabled===""&&(e.update.CoopEnabled=null),e}async getDocTypeByName(e,a,t){const{BaseService:o}=await D(async()=>{const{BaseService:y}=await import("./index-D3nHpiIA.js").then(v=>v.bc);return{BaseService:y}},__vite__mapDeps([0,1,2,3,4])),s=new o,d={serviceModel:n,docName:"DocService::getDocTypeByName",cmd:{action:"find",query:{where:{docTypeName:`${t}`}}},dSource:1},l=await s.read(null,null,d);return"state"in l?await l:u}}export{O as DocService};
