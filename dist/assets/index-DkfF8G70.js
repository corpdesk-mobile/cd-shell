import"./index-BRIKc63m.js";import{T as c,I as p,O as f,g as s,c as l,F as y,d as h,e as E,f as R,R as C}from"./index-D3nHpiIA.js";import{aH as ot,aP as at,aI as st,Y as it,aW as ut,aY as ct,b2 as yt,ae as ft,_ as lt,a0 as dt,a1 as gt,aB as mt,ah as pt,aX as ht,i as Et,an as Rt,h as Ct,ac as Tt,af as bt,a4 as Mt,au as wt,j as vt,o as Nt,ar as At,am as It,aL as St,aO as Lt,aN as Bt,a8 as xt,a7 as Dt,ak as $t,aM as Ft,aG as Jt,as as _t,aD as Ut,aJ as kt,aE as qt,av as Pt,k as zt,m as Vt,ap as Qt,aF as jt,ab as Xt,$ as Zt,q as Kt,r as Yt,ag as Gt,al as Wt,aj as Ht,aS as Ot,M as er,aT as tr,aU as rr,bb as nr,a9 as or,a$ as ar,aC as sr,ax as ir,ao as ur,aA as cr,aq as yr,aa as fr,b0 as lr,at as dr,aV as gr,Q as mr,aw as pr,p as hr,az as Er,ad as Rr,l as Cr,aQ as Tr,ai as br,a_ as Mr,S as wr,aK as vr,aZ as Nr,b1 as Ar,ay as Ir,Z as Sr,b9 as Lr,b3 as Br,b4 as xr,b5 as Dr,b6 as $r,b7 as Fr,b8 as Jr,a6 as _r,a5 as Ur,aR as kr,a3 as qr,t as Pr,U as zr,n as Vr,a2 as Qr,ba as jr,x as Xr,y as Zr,V as Kr,z as Yr,w as Gr,v as Wr,L as Hr,X as Or,A as en,G as tn,N as rn,J as nn,H as on,K as an,W as sn}from"./index-D3nHpiIA.js";import"./index-CCs3NjLB.js";import"./dayjs.min-8nNmiLn8.js";class A extends c{constructor(e,r){super(`Cannot get reflected type for a "${r}" method's parameter of "${e.name}" class. Make sure you have turned on an "emitDecoratorMetadata": true option in tsconfig.json. Also make sure you have imported "reflect-metadata" on top of the main entry file in your application.`)}}class I extends c{constructor(e){super(`Connection with ${e} database is not established. Check connection configuration.`)}}class S extends c{constructor(e,r,n){super(e+" metadata already exists for the class constructor "+JSON.stringify(r)+(n?" on property "+n:". If you previously renamed or moved entity class, make sure that compiled version of old entity class source wasn't left in the compiler output directory."))}}class T extends c{constructor(e,r){super(`Primary column ${e.constructor.name}#${r} cannot be nullable. Its not allowed for primary keys. Try to remove nullable option.`)}}class L extends c{constructor(e){super(`Cannot get a Repository for "${e} connection, because connection with the database is not established yet. Call connection#connect method to establish connection.`)}}class B extends c{constructor(e,r){super(`Using JoinTable on ${e.name}#${r.propertyName} is wrong. ${e.name}#${r.propertyName} has ${r.relationType} relation, however you can use JoinTable only on many-to-many relations.`)}}class x extends c{constructor(e,r){super(),r.inverseRelation?this.message=`JoinColumn is missing on both sides of ${e.name}#${r.propertyName} and ${r.inverseEntityMetadata.name}#${r.inverseRelation.propertyName} one-to-one relationship. You need to put JoinColumn decorator on one of the sides.`:this.message=`JoinColumn is missing on ${e.name}#${r.propertyName} one-to-one relationship. You need to put JoinColumn decorator on it.`}}class D extends c{constructor(e){super(`Cannot get entity manager for "${e}" connection because connection is not yet established.`)}}class $ extends c{constructor(e,r){super(e+" metadata with such name "+r+" already exists. Do you apply decorator twice? Or maybe try to change a name?")}}class F extends c{constructor(e){super();let r;p.isEntitySchema(e)?r=e.options.name:typeof e=="function"||f.isObject(e)&&"name"in e?r=e.name:r=e,this.message=`Repository of the "${r}" class is not a TreeRepository. Try to apply @Tree decorator on your entity.`}}class J extends c{constructor(e,r){super(),r.inverseRelation?this.message=`JoinTable is missing on both sides of ${e.name}#${r.propertyName} and ${r.inverseEntityMetadata.name}#${r.inverseRelation.propertyName} many-to-many relationship. You need to put decorator decorator on one of the sides.`:this.message=`JoinTable is missing on ${e.name}#${r.propertyName} many-to-many relationship. You need to put JoinTable decorator on it.`}}class _ extends c{constructor(e,r){super(`Using JoinColumn is allowed only on one side of the one-to-one relationship. Both ${e.name}#${r.propertyName} and ${r.inverseEntityMetadata.name}#${r.inverseRelation.propertyName} has JoinTable decorators. Choose one of them and left JoinTable decorator only on it.`)}}class U extends c{constructor(e,r){super(`Using JoinTable is allowed only on one side of the many-to-many relationship. Both ${e.name}#${r.propertyName} and ${r.inverseEntityMetadata.name}#${r.inverseRelation.propertyName} has JoinTable decorators. Choose one of them and left JoinColumn decorator only on it.`)}}class k extends c{constructor(){super("Internal error. Persisted entity was not found in the list of prepared operated entities.")}}class q extends c{constructor(e,r){super(`Using JoinColumn on ${e.name}#${r.propertyName} is wrong. You can use JoinColumn only on one-to-one and many-to-one relations.`)}}class m extends c{constructor(e,r){super(`Column type for ${e.constructor.name}#${r} is not defined and cannot be guessed. Make sure you have turned on an "emitDecoratorMetadata": true option in tsconfig.json. Also make sure you have imported "reflect-metadata" on top of the main entry file in your application (before any entity imported).If you are using JavaScript instead of TypeScript you must explicitly provide a column type.`)}}function P(t,e){return function(r,n){let o;typeof t=="string"||typeof t=="function"?o=t:t&&(e=t,o=t.type),e||(e={});const a=Reflect&&Reflect.getMetadata?Reflect.getMetadata("design:type",r,n):void 0;if(!o&&a&&(o=a),!e.type&&o&&(e.type=o),e.type==="hstore"&&!e.hstoreType&&(e.hstoreType=a===Object?"object":"string"),typeof t=="function")s().embeddeds.push({target:r.constructor,propertyName:n,isArray:a===Array||e.array===!0,prefix:e.prefix!==void 0?e.prefix:void 0,type:t});else{if(!e.type)throw new m(r,n);e.unique===!0&&s().uniques.push({target:r.constructor,columns:[n]}),s().columns.push({target:r.constructor,propertyName:n,mode:"regular",options:e}),e.generated&&s().generations.push({target:r.constructor,propertyName:n,strategy:typeof e.generated=="string"?e.generated:"increment"})}}}function z(t){return function(e,r){s().columns.push({target:e.constructor,propertyName:r,mode:"createDate",options:t||{}})}}function V(t){return function(e,r){s().columns.push({target:e.constructor,propertyName:r,mode:"deleteDate",options:t||{}})}}function Q(t,e){const r={};let n;return t?(typeof t=="string"&&(n=t),f.isObject(t)&&(n="increment",Object.assign(r,t))):n="increment",f.isObject(e)&&Object.assign(r,e),function(o,a){r.type||(n==="increment"||n==="identity"?r.type=Number:n==="uuid"?r.type="uuid":n==="rowid"&&(r.type="int")),r.primary=!0,s().columns.push({target:o.constructor,propertyName:a,mode:"regular",options:r}),s().generations.push({target:o.constructor,propertyName:a,strategy:n})}}function j(t,e){return function(r,n){let o;typeof t=="string"||t===String||t===Boolean||t===Number?o=t:e=Object.assign({},t),e||(e={});const a=Reflect&&Reflect.getMetadata?Reflect.getMetadata("design:type",r,n):void 0;if(!o&&a&&(o=a),!e.type&&o&&(e.type=o),!e.type)throw new m(r,n);if(e.nullable)throw new T(r,n);e.primary=!0,s().columns.push({target:r.constructor,propertyName:n,mode:"regular",options:e}),e.generated&&s().generations.push({target:r.constructor,propertyName:n,strategy:typeof e.generated=="string"?e.generated:"increment"})}}function X(t){return function(e,r){s().columns.push({target:e.constructor,propertyName:r,mode:"updateDate",options:t||{}})}}function Z(t){return function(e,r){s().columns.push({target:e.constructor,propertyName:r,mode:"version",options:t||{}})}}function K(t,e){return function(r,n){let o;if(typeof t=="string"?o=t:(e=t,o=e.type),!(e!=null&&e.query))throw new Error("Column options must be defined for calculated columns.");const a=Reflect&&Reflect.getMetadata?Reflect.getMetadata("design:type",r,n):void 0;if(!o&&a&&(o=a),o&&(e.type=o),e.type==="hstore"&&!e.hstoreType&&(e.hstoreType=a===Object?"object":"string"),!e.type)throw new m(r,n);s().columns.push({target:r.constructor,propertyName:n,mode:"virtual-property",options:e||{}})}}function Y(t){return function(e,r){s().columns.push({target:e.constructor,propertyName:r,mode:"regular",options:t||{}})}}function G(t){return function(e,r){t||(t={}),t.primary=!0,t.name||(t.name="_id"),s().columns.push({target:e.constructor,propertyName:r,mode:"objectId",options:t})}}function W(){return function(t,e){s().entityListeners.push({target:t.constructor,propertyName:e,type:l.AFTER_INSERT})}}function H(){return function(t,e){s().entityListeners.push({target:t.constructor,propertyName:e,type:l.AFTER_LOAD})}}function O(){return function(t,e){s().entityListeners.push({target:t.constructor,propertyName:e,type:l.AFTER_REMOVE})}}function ee(){return function(t,e){s().entityListeners.push({target:t.constructor,propertyName:e,type:l.AFTER_SOFT_REMOVE})}}function te(){return function(t,e){s().entityListeners.push({target:t.constructor,propertyName:e,type:l.AFTER_RECOVER})}}function re(){return function(t,e){s().entityListeners.push({target:t.constructor,propertyName:e,type:l.AFTER_UPDATE})}}function ne(){return function(t,e){s().entityListeners.push({target:t.constructor,propertyName:e,type:l.BEFORE_INSERT})}}function oe(){return function(t,e){s().entityListeners.push({target:t.constructor,propertyName:e,type:l.BEFORE_REMOVE})}}function ae(){return function(t,e){s().entityListeners.push({target:t.constructor,propertyName:e,type:l.BEFORE_SOFT_REMOVE})}}function se(){return function(t,e){s().entityListeners.push({target:t.constructor,propertyName:e,type:l.BEFORE_RECOVER})}}function ie(){return function(t,e){s().entityListeners.push({target:t.constructor,propertyName:e,type:l.BEFORE_UPDATE})}}function ue(){return function(t){s().entitySubscribers.push({target:t})}}function ce(t){return function(e,r){(Array.isArray(t)?t:[t||{}]).forEach(o=>{s().joinColumns.push({target:e.constructor,propertyName:r,name:o.name,referencedColumnName:o.referencedColumnName,foreignKeyConstraintName:o.foreignKeyConstraintName})})}}function ye(t){return function(e,r){t=t||{},s().joinTables.push({target:e.constructor,propertyName:r,name:t.name,joinColumns:t&&t.joinColumn?[t.joinColumn]:t.joinColumns,inverseJoinColumns:t&&t.inverseJoinColumn?[t.inverseJoinColumn]:t.inverseJoinColumns,schema:t&&t.schema?t.schema:void 0,database:t&&t.database?t.database:void 0,synchronize:!(t&&t.synchronize===!1)})}}function fe(t,e,r){let n;return f.isObject(e)?r=e:n=e,function(o,a){r||(r={});let i=r.lazy===!0;if(!i&&Reflect&&Reflect.getMetadata){const u=Reflect.getMetadata("design:type",o,a);u&&typeof u.name=="string"&&u.name.toLowerCase()==="promise"&&(i=!0)}s().relations.push({target:o.constructor,propertyName:a,relationType:"many-to-many",isLazy:i,type:t,inverseSideProperty:n,options:r})}}function le(t,e,r){let n;return f.isObject(e)?r=e:n=e,function(o,a){r||(r={});let i=r&&r.lazy===!0;if(!i&&Reflect&&Reflect.getMetadata){const u=Reflect.getMetadata("design:type",o,a);u&&typeof u.name=="string"&&u.name.toLowerCase()==="promise"&&(i=!0)}s().relations.push({target:o.constructor,propertyName:a,relationType:"many-to-one",isLazy:i,type:t,inverseSideProperty:n,options:r})}}function de(t,e,r){return function(n,o){r||(r={});let a=r&&r.lazy===!0;if(!a&&Reflect&&Reflect.getMetadata){const i=Reflect.getMetadata("design:type",n,o);i&&typeof i.name=="string"&&i.name.toLowerCase()==="promise"&&(a=!0)}s().relations.push({target:n.constructor,propertyName:o,isLazy:a,relationType:"one-to-many",type:t,inverseSideProperty:e,options:r})}}function ge(t,e,r){let n;return f.isObject(e)?r=e:n=e,function(o,a){r||(r={});let i=!!(r&&r.lazy===!0);if(!i&&Reflect&&Reflect.getMetadata){const u=Reflect.getMetadata("design:type",o,a);u&&typeof u.name=="string"&&u.name.toLowerCase()==="promise"&&(i=!0)}s().relations.push({target:o.constructor,propertyName:a,isLazy:i,relationType:"one-to-one",type:t,inverseSideProperty:n,options:r})}}function me(t,e,r){return function(n,o){s().relationCounts.push({target:n.constructor,propertyName:o,relation:t,alias:e,queryBuilderFactory:r})}}function pe(t,e,r){return function(n,o){s().relationIds.push({target:n.constructor,propertyName:o,relation:t,alias:e,queryBuilderFactory:r})}}function he(t,e){const r=(f.isObject(t)?t:e)||{},n=typeof t=="string"?t:r.name;return function(o){s().tables.push({target:o,name:n,type:"regular",orderBy:r.orderBy?r.orderBy:void 0,engine:r.engine?r.engine:void 0,database:r.database?r.database:void 0,schema:r.schema?r.schema:void 0,synchronize:r.synchronize,withoutRowid:r.withoutRowid,comment:r.comment?r.comment:void 0})}}function Ee(t){return function(e){s().tables.push({target:e,type:"entity-child"}),typeof t<"u"&&s().discriminatorValues.push({target:e,value:t})}}function Re(t){return function(e){s().inheritances.push({target:e,pattern:t&&t.pattern?t.pattern:"STI",column:t&&t.column?typeof t.column=="string"?{name:t.column}:t.column:void 0})}}function Ce(t,e){const r=(f.isObject(t)?t:e)||{},n=typeof t=="string"?t:r.name;return function(o){s().tables.push({target:o,name:n,expression:r.expression,dependsOn:r.dependsOn?new Set(r.dependsOn):void 0,type:"view",database:r.database?r.database:void 0,schema:r.schema?r.schema:void 0,synchronize:r.synchronize!==!1,materialized:!!r.materialized})}}function Te(){return function(t,e){s().columns.push({target:t.constructor,propertyName:e,mode:"treeLevel",options:{}})}}function be(t){return function(e,r){t||(t={});const n=Reflect&&Reflect.getMetadata?Reflect.getMetadata("design:type",e,r):void 0,o=n&&typeof n.name=="string"&&n.name.toLowerCase()==="promise"||!1;s().relations.push({isTreeParent:!0,target:e.constructor,propertyName:r,isLazy:o,relationType:"many-to-one",type:()=>e.constructor,options:t})}}function Me(t){return function(e,r){t||(t={});const n=Reflect&&Reflect.getMetadata?Reflect.getMetadata("design:type",e,r):void 0,o=n&&typeof n.name=="string"&&n.name.toLowerCase()==="promise"||!1;s().relations.push({isTreeChildren:!0,target:e.constructor,propertyName:r,isLazy:o,relationType:"one-to-many",type:()=>e.constructor,options:t})}}function we(t,e){return function(r){s().trees.push({target:r,type:t,options:t==="closure-table"?e:void 0})}}function ve(t,e,r){const n=typeof t=="string"?t:void 0,o=typeof t=="string"?e:t;let a=f.isObject(t)&&!Array.isArray(t)?t:r;return a||(a=f.isObject(e)&&!Array.isArray(e)?e:r),function(i,u){s().indices.push({target:u?i.constructor:i,name:n,columns:u?[u]:o,synchronize:!(a&&a.synchronize===!1),where:a?a.where:void 0,unique:!!(a&&a.unique),spatial:!!(a&&a.spatial),fulltext:!!(a&&a.fulltext),nullFiltered:!!(a&&a.nullFiltered),parser:a?a.parser:void 0,sparse:!!(a&&a.sparse),background:!!(a&&a.background),concurrent:!!(a&&a.concurrent),expireAfterSeconds:a?a.expireAfterSeconds:void 0})}}function Ne(t,e,r,n){const o=typeof e=="string"||typeof e=="function"?e:void 0,a=Array.isArray(e)?e:void 0,i=Array.isArray(r)?r:void 0,u=f.isObject(e)&&!Array.isArray(e)?e:f.isObject(r)&&!Array.isArray(r)?r:n;return function(d,g){s().foreignKeys.push({target:g?d.constructor:d,propertyName:g,type:t,inverseSide:o,columnNames:a,referencedColumnNames:i,...u})}}function Ae(t,e,r){const n=typeof t=="string"?t:void 0,o=typeof t=="string"?e:t;let a=f.isObject(t)&&!Array.isArray(t)?t:r;return a||(a=f.isObject(t)&&!Array.isArray(e)?e:r),function(i,u){let d=o;if(u!==void 0)switch(typeof u){case"string":d=[u];break;case"symbol":d=[u.toString()];break}const g={target:u?i.constructor:i,name:n,columns:d,deferrable:a?a.deferrable:void 0};s().uniques.push(g)}}function Ie(t,e){const r=e?t:void 0,n=e||t;if(!n)throw new c("Check expression is required");return function(o,a){s().checks.push({target:a?o.constructor:o,name:r,expression:n})}}function Se(t,e){const r=e?t:void 0,n=e||t;if(!n)throw new c("Exclusion expression is required");return function(o,a){s().exclusions.push({target:a?o.constructor:o,name:r,expression:n})}}function Le(t="increment"){return function(e,r){s().generations.push({target:e.constructor,propertyName:r,strategy:t})}}function Be(t){return function(e){s().entityRepositories.push({target:e,entity:t})}}function xe(...t){return new y("and",t,!0,!0)}function De(...t){return new y("or",t,!0,!0)}function $e(t){return new y("any",t)}function Fe(t){return new y("arrayContainedBy",t)}function Je(t){return new y("arrayContains",t)}function _e(t){return new y("arrayOverlap",t)}function Ue(t,e){return new y("between",[t,e],!0,!0)}class b extends y{constructor(e){super("equal",e),this["@instanceof"]=Symbol.for("EqualOperator")}}function ke(t){return new b(t)}function qe(){return new y("isNull",void 0,!1)}function Pe(t){return new y("lessThan",t)}function ze(t){return new y("lessThanOrEqual",t)}function Ve(t){return new y("ilike",t)}function Qe(t){return new y("moreThan",t)}function je(t){return new y("moreThanOrEqual",t)}function Xe(t){return new y("not",t)}function Ze(t,e){return typeof t!="function"?new y("raw",t,!1):new y("raw",[],!0,!0,t,e)}function Ke(t){return new y("jsonContains",t)}class Ye{hasId(){return this.constructor.getRepository().hasId(this)}save(e){return this.constructor.getRepository().save(this,e)}remove(e){return this.constructor.getRepository().remove(this,e)}softRemove(e){return this.constructor.getRepository().softRemove(this,e)}recover(e){return this.constructor.getRepository().recover(this,e)}async reload(){const e=this.constructor,r=e.getRepository().metadata.getEntityIdMap(this);if(!r)throw new Error("Entity doesn't have id-s set, cannot reload entity");const n=await e.getRepository().findOneByOrFail(r);f.assign(this,n)}static useDataSource(e){this.dataSource=e}static getRepository(){const e=this.dataSource;if(!e)throw new Error("DataSource is not set for this entity.");return e.getRepository(this)}static get target(){return this.getRepository().target}static hasId(e){return this.getRepository().hasId(e)}static getId(e){return this.getRepository().getId(e)}static createQueryBuilder(e){return this.getRepository().createQueryBuilder(e)}static create(e){return this.getRepository().create(e)}static merge(e,...r){return this.getRepository().merge(e,...r)}static preload(e){return this.getRepository().preload(e)}static save(e,r){return this.getRepository().save(e,r)}static remove(e,r){return this.getRepository().remove(e,r)}static softRemove(e,r){return this.getRepository().softRemove(e,r)}static insert(e){return this.getRepository().insert(e)}static update(e,r){return this.getRepository().update(e,r)}static upsert(e,r){return this.getRepository().upsert(e,r)}static delete(e){return this.getRepository().delete(e)}static exists(e){return this.getRepository().exists(e)}static existsBy(e){return this.getRepository().existsBy(e)}static count(e){return this.getRepository().count(e)}static countBy(e){return this.getRepository().countBy(e)}static sum(e,r){return this.getRepository().sum(e,r)}static average(e,r){return this.getRepository().average(e,r)}static minimum(e,r){return this.getRepository().minimum(e,r)}static maximum(e,r){return this.getRepository().maximum(e,r)}static find(e){return this.getRepository().find(e)}static findBy(e){return this.getRepository().findBy(e)}static findAndCount(e){return this.getRepository().findAndCount(e)}static findAndCountBy(e){return this.getRepository().findAndCountBy(e)}static findByIds(e){return this.getRepository().findByIds(e)}static findOne(e){return this.getRepository().findOne(e)}static findOneBy(e){return this.getRepository().findOneBy(e)}static findOneById(e){return this.getRepository().findOneById(e)}static findOneOrFail(e){return this.getRepository().findOneOrFail(e)}static findOneByOrFail(e){return this.getRepository().findOneByOrFail(e)}static query(e,r){return this.getRepository().query(e,r)}static clear(){return this.getRepository().clear()}}class Ge extends h{}class We extends E{constructor(){super(...arguments),this["@instanceof"]=Symbol.for("NotBrackets")}}class He extends R{constructor(e="hash"){super(),this.IDENTIFIER_MAX_SIZE=30,this.DEFAULT_COLUMN_PREFIX="COL_",this.shortenStrategy=e}columnName(e,r,n){const o=super.columnName(e,r,n);if(this.shortenStrategy==="truncate")return this.truncateIdentifier(o);if(this.shortenStrategy==="hash")return this.hashIdentifier(o,this.DEFAULT_COLUMN_PREFIX);throw new c("Invalid shortenStrategy")}hashIdentifier(e,r){if(r.length>=this.IDENTIFIER_MAX_SIZE)throw new c("Prefix must be shorter than IDENTIFIER_MAX_SIZE");return r+C.sha1(e).substring(0,this.IDENTIFIER_MAX_SIZE-r.length)}truncateIdentifier(e){return e.length>this.IDENTIFIER_MAX_SIZE?e.substring(0,this.IDENTIFIER_MAX_SIZE):e}}class Oe{constructor(e){this.options=e,this["@instanceof"]=Symbol.for("EntitySchema")}}class et{}class tt{}export{ot as AbstractLogger,at as AbstractRepository,st as AdvancedConsoleLogger,W as AfterInsert,H as AfterLoad,te as AfterRecover,O as AfterRemove,ee as AfterSoftRemove,re as AfterUpdate,it as AlreadyHasActiveConnectionError,xe as And,$e as Any,Fe as ArrayContainedBy,Je as ArrayContains,_e as ArrayOverlap,ut as AuroraMysqlDriver,ct as AuroraPostgresDriver,Ye as BaseEntity,ne as BeforeInsert,se as BeforeRecover,oe as BeforeRemove,ae as BeforeSoftRemove,ie as BeforeUpdate,yt as BetterSqlite3Driver,Ue as Between,E as Brackets,ft as CannotAttachTreeChildrenEntityError,lt as CannotConnectAlreadyConnectedError,dt as CannotCreateEntityIdMapError,gt as CannotDetermineEntityError,mt as CannotExecuteNotConnectedError,D as CannotGetEntityManagerNotConnectedError,A as CannotReflectMethodParameterTypeError,Ie as Check,Ee as ChildEntity,pt as CircularRelationsError,ht as CockroachDriver,P as Column,m as ColumnTypeUndefinedError,Ge as Connection,I as ConnectionIsNotSetError,Et as ConnectionManager,Rt as ConnectionNotFoundError,Ct as ConnectionOptionsReader,z as CreateDateColumn,Tt as CustomRepositoryCannotInheritRepositoryError,bt as CustomRepositoryDoesNotHaveEntityError,Mt as CustomRepositoryNotFoundError,h as DataSource,wt as DataTypeNotSupportedError,R as DefaultNamingStrategy,V as DeleteDateColumn,vt as DeleteQueryBuilder,Nt as DeleteResult,At as DriverOptionNotSetError,It as DriverPackageNotInstalledError,St as DummyLogger,he as Entity,Lt as EntityManager,Bt as EntityMetadata,xt as EntityMetadataNotFoundError,Dt as EntityNotFoundError,$t as EntityPropertyNotFoundError,Be as EntityRepository,Oe as EntitySchema,et as EntitySchemaEmbeddedColumnOptions,tt as EntitySchemaOptions,ke as Equal,b as EqualOperator,ue as EventSubscriber,Se as Exclusion,Ft as FileLogger,y as FindOperator,Jt as FindOptionsUtils,_t as FindRelationsNotFoundError,Ut as ForbiddenTransactionModeOverrideError,Ne as ForeignKey,kt as FormattedConsoleLogger,Le as Generated,Ve as ILike,qt as In,ve as Index,Pt as InitializedRelationError,zt as InsertQueryBuilder,Vt as InsertResult,Qt as InsertValuesMissingError,p as InstanceChecker,qe as IsNull,ce as JoinColumn,ye as JoinTable,Ke as JsonContains,He as LegacyOracleNamingStrategy,Pe as LessThan,ze as LessThanOrEqual,jt as Like,Xt as LimitOnUpdateNotSupportedError,Zt as LockNotSupportedOnGivenDriverError,fe as ManyToMany,le as ManyToOne,S as MetadataAlreadyExistsError,$ as MetadataWithSuchNameAlreadyExistsError,Kt as Migration,Yt as MigrationExecutor,Gt as MissingDeleteDateColumnError,Wt as MissingDriverError,x as MissingJoinColumnError,J as MissingJoinTableError,Ht as MissingPrimaryColumnError,Ot as MongoDriver,er as MongoEntityManager,tr as MongoQueryRunner,rr as MongoRepository,Qe as MoreThan,je as MoreThanOrEqual,nr as MssqlParameter,or as MustBeEntityError,ar as MysqlDriver,L as NoConnectionForRepositoryError,sr as NoConnectionOptionError,ir as NoNeedToReleaseEntityManagerError,ur as NoVersionOrUpdateDateColumnError,Xe as Not,We as NotBrackets,G as ObjectIdColumn,cr as OffsetWithoutLimitNotSupportedError,de as OneToMany,ge as OneToOne,yr as OptimisticLockCanNotBeUsedError,fr as OptimisticLockVersionMismatchError,De as Or,lr as OracleDriver,k as PersistedEntityNotFoundError,dr as PessimisticLockTransactionRequiredError,gr as PostgresDriver,j as PrimaryColumn,T as PrimaryColumnCannotBeNullableError,Q as PrimaryGeneratedColumn,mr as QueryBuilder,pr as QueryFailedError,hr as QueryResult,Er as QueryRunnerAlreadyReleasedError,Rr as QueryRunnerProviderAlreadyReleasedError,Ze as Raw,me as RelationCount,pe as RelationId,Cr as RelationQueryBuilder,Tr as Repository,F as RepositoryNotTreeError,br as ReturningStatementNotSupportedError,Mr as SapDriver,wr as SelectQueryBuilder,vr as SimpleConsoleLogger,Nr as SqlServerDriver,Ar as SqliteDriver,Ir as SubjectRemovedAndUpdatedError,Sr as SubjectWithoutIdentifierError,Lr as Table,Br as TableCheck,xr as TableColumn,Dr as TableExclusion,$r as TableForeignKey,Fr as TableIndex,Re as TableInheritance,Jr as TableUnique,_r as TransactionAlreadyStartedError,Ur as TransactionNotStartedError,we as Tree,Me as TreeChildren,Te as TreeLevelColumn,be as TreeParent,kr as TreeRepository,qr as TreeRepositoryNotSupportedError,Pr as TreeRepositoryUtils,c as TypeORMError,Ae as Unique,X as UpdateDateColumn,zr as UpdateQueryBuilder,Vr as UpdateResult,Qr as UpdateValuesMissingError,q as UsingJoinColumnIsNotAllowedError,_ as UsingJoinColumnOnlyOnOneSideAllowedError,B as UsingJoinTableIsNotAllowedError,U as UsingJoinTableOnlyOnOneSideAllowedError,Z as VersionColumn,jr as View,Y as ViewColumn,Ce as ViewEntity,K as VirtualColumn,Xr as createConnection,Zr as createConnections,Kr as createQueryBuilder,Yr as getConnection,Gr as getConnectionManager,Wr as getConnectionOptions,Hr as getCustomRepository,Or as getFromContainer,en as getManager,s as getMetadataArgsStorage,tn as getMongoManager,rn as getMongoRepository,nn as getRepository,on as getSqljsManager,an as getTreeRepository,sn as useContainer};
