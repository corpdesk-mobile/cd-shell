/**
 * post-build.js
 * --------------------------
 * Generates runtime "view" controllers and module wrappers
 * after TypeScript compilation (dist-ts).
 *
 * - Converts each `*.controller.js` class file into a runtime object
 *   in the corresponding `view` directory.
 * - Each runtime object follows this shape:
 *      export const ctlName = {
 *         __template() { ... },
 *         __setup() { ... },
 *         ...
 *      };
 *
 * Usage:
 *    npm run post-build              â†’ normal
 *    VERBOSE=true npm run post-build â†’ with detailed logs
 */

import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import { promisify } from "util";

// Promisified fs utilities
const writeFile = promisify(fs.writeFile);
const open = promisify(fs.open);
const fsync = promisify(fs.fsync);
const close = promisify(fs.close);

// Verbose mode toggle
const VERBOSE = process.env.VERBOSE === "true";
const vLog = (...args) => VERBOSE && console.log("[VERBOSE]", ...args);

// Path setup
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const PROJECT_ROOT = path.resolve(__dirname, "..");
const BASE_DIR = path.resolve(__dirname, "../dist-ts/CdShell");
const SYS_DIR = path.join(BASE_DIR, "sys");
const APP_DIR = path.join(BASE_DIR, "app");

/* -------------------------------------------------------------------------- */
/* Helper: Controller name derivation                                         */
/* -------------------------------------------------------------------------- */
function deriveControllerNames(filename) {
  const namePart = filename.replace(".controller.js", "");
  const pascalName = namePart
    .split("-")
    .map((s) => s.charAt(0).toUpperCase() + s.slice(1))
    .join("");

  return {
    runtimeName: "ctl" + pascalName,
    className: pascalName + "Controller",
    filename,
  };
}

/* -------------------------------------------------------------------------- */
/* Core: Generate a runtime controller stub                                   */
/* -------------------------------------------------------------------------- */
async function generateRuntimeControllerStub(
  sourcePath,
  targetViewDir,
  modulePath
) {
  const filename = path.basename(sourcePath);
  const names = deriveControllerNames(filename);
  const targetPath = path.join(targetViewDir, filename);
  const relativeDistPath = path
    .relative(targetViewDir, sourcePath)
    .replace(/\\/g, "/");

  vLog("Generating runtime stub for:", names.runtimeName);

  if (!fs.existsSync(sourcePath)) {
    console.warn(`[WARN] Controller source missing: ${sourcePath}`);
    return;
  }

  // ðŸ”¹ Generate a *runtime object* â€” not a class instance.
  const content = `// Generated by post-build.js - Runtime Controller Stub
import { ${names.className} } from '${relativeDistPath}';

const _controller = new ${names.className}();

export const ${names.runtimeName} = {
  __template: () => _controller.template?.(),
  __setup: () => _controller.setup?.(),
  __processFormData: () => _controller.processFormData?.(),
  ...Object.keys(_controller)
    .filter(k => !["template", "setup", "processFormData"].includes(k))
    .reduce((acc, k) => ({ ...acc, [k]: _controller[k] }), {})
};
`;

  // await writeFile(targetPath, content, "utf8");

  // const fd = await open(targetPath, "r+");
  // await fsync(fd);
  // await close(fd);
  // fs.utimesSync(targetPath, new Date(), new Date());
  // await new Promise((r) => setTimeout(r, 30));

  vLog(`Runtime controller written â†’ ${targetPath}`);
  return names;
}

/* -------------------------------------------------------------------------- */
/* Core: Generate module-level view index                                     */
/* -------------------------------------------------------------------------- */
async function syncModuleView(modulePath, controllerFiles) {
  if (!controllerFiles || controllerFiles.length === 0) return;

  const targetModuleBaseDir = path.resolve(
    PROJECT_ROOT,
    `src/CdShell/${modulePath}`
  );
  const targetViewDir = path.join(targetModuleBaseDir, "view");

  if (!fs.existsSync(targetViewDir)) {
    fs.mkdirSync(targetViewDir, { recursive: true });
    vLog(`Created view directory: ${targetViewDir}`);
  }

  const imports = [];
  const runtimeControllers = [];

  for (const sourcePath of controllerFiles) {
    const names = await generateRuntimeControllerStub(
      sourcePath,
      targetViewDir,
      modulePath
    );
    if (!names) continue;
    runtimeControllers.push(names);
    imports.push(`import { ${names.runtimeName} } from "./${names.filename}";`);
  }

  const targetIndexFile = path.join(targetViewDir, "index.js");
  const [ctx, moduleId = "unknown"] = modulePath.split("/");

  const primaryController =
    runtimeControllers.find((c) => c.runtimeName === "ctlSignIn") ||
    runtimeControllers[0];

  if (!primaryController) {
    console.warn(
      `[WARN] No primary controller for module ${modulePath}. Skipping index.js.`
    );
    return;
  }

  const templateContent = `${primaryController.runtimeName}.__template()`;

  const indexContent = `// Generated by post-build.js - Module Index
${imports.join("\n")}

export const ${moduleId.replace("-", "")}Module = {
  ctx: "${ctx}",
  moduleId: "${moduleId}",
  moduleName: "Auto-Generated Module",
  moduleGuid: "auto-guid",
  controller: ${primaryController.runtimeName},
  template: ${templateContent},
  menu: []
};

export const module = ${moduleId.replace("-", "")}Module;
`;

  // await writeFile(targetIndexFile, indexContent, "utf8");

  // const fd = await open(targetIndexFile, "r+");
  // await fsync(fd);
  // await close(fd);
  // fs.utimesSync(targetIndexFile, new Date(), new Date());
  // await new Promise((r) => setTimeout(r, 30));

  console.log(
    `[OK] Generated module wrapper: ${path.relative(PROJECT_ROOT, targetIndexFile)}`
  );
}

/* -------------------------------------------------------------------------- */
/* Helpers: Directory traversal & logging                                     */
/* -------------------------------------------------------------------------- */
function findControllers(baseDir) {
  const results = [];
  function walk(dir) {
    if (!fs.existsSync(dir)) return;
    for (const entry of fs.readdirSync(dir)) {
      const fullPath = path.join(dir, entry);
      const stat = fs.statSync(fullPath);
      if (stat.isDirectory()) walk(fullPath);
      else if (entry.endsWith(".controller.js")) {
        vLog("Found controller:", fullPath);
        results.push(fullPath);
      }
    }
  }
  walk(baseDir);
  return results;
}

function logControllers(type, list) {
  console.log(`[${type}] Found ${list.length} controllers`);
  if (VERBOSE)
    list.forEach((c) => console.log(" -", path.relative(BASE_DIR, c)));
}

const timestamp = () => new Date().toLocaleString();

/* -------------------------------------------------------------------------- */
/* Main Execution                                                             */
/* -------------------------------------------------------------------------- */
(async function run() {
  const sysControllers = findControllers(SYS_DIR);
  const appControllers = findControllers(APP_DIR);

  logControllers("sys", sysControllers);
  logControllers("app", appControllers);

  const modulesToSync = {};

  [...sysControllers, ...appControllers].forEach((fullPath) => {
    const relativePath = path.relative(BASE_DIR, fullPath).replace(/\\/g, "/");
    const match = relativePath.match(/^(.*?\/.*?)\/controllers\//);
    if (match) {
      const modulePath = match[1];
      modulesToSync[modulePath] ||= [];
      modulesToSync[modulePath].push(fullPath);
    }
  });

  vLog("Modules to sync:", Object.keys(modulesToSync));

  for (const modulePath of Object.keys(modulesToSync)) {
    vLog(`Processing module: ${modulePath}`);
    await syncModuleView(modulePath, modulesToSync[modulePath]);
  }

  console.log("[post-build] Controller â†’ view sync complete.");
  console.log("--------------------------------------------------");
  console.log(`[post-build] Build completed successfully.`);
  console.log(timestamp());
  console.log("--------------------------------------------------");
})();
